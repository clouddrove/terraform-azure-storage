

---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#


# Name of this project
name: Terraform AZURE STORAGE

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-azure-storage

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-azure-storage.svg"
    url: "https://github.com/clouddrove/terraform-azure-storage/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-azure-storage/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-azure-storage/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"

#  description of this project
description: |-
  Terraform module to create storage resource on AZURE.
# extra content
include:
  - "terraform.md"

# How to use this project
# yamllint disable rule:line-length
usage: |-
  ### Simple Example
  Here is an example of how you can use this module in your inventory structure:
  #### default storage
  ```hcl
    module "storage" {
      depends_on                = [module.resource_group]
      source                    = "clouddrove/storage/azure"
      name                      = "app"
      environment               = "test"
      label_order               = ["name", "environment"]
      default_enabled           = true
      resource_group_name       = module.resource_group.resource_group_name
      location                  = module.resource_group.resource_group_location
      storage_account_name      = "stordtyre236"


      ##   Storage Container
      containers_list = [
        { name = "app-test", access_type = "private" },
        { name = "app2", access_type = "private" },
      ]

      ##   Storage File Share
      file_shares = [
        { name = "fileshare1", quota = 5 },
      ]

      ##   Storage Tables
      tables = ["table1"]

      ## Storage Queues
      queues = ["queue1"]

      management_policy_enable = true

      #enable private endpoint
      virtual_network_id = module.vnet.vnet_id[0]
      subnet_id          = module.subnet.default_subnet_id[0]

      log_analytics_workspace_id = module.log-analytics.workspace_id

    }
    ```
  ####  storage with cmk encryption
  ```hcl
    module "storage" {
      source                        = "../.."
      name                          = local.name
      environment                   = local.environment
      label_order                   = local.label_order
      resource_group_name           = module.resource_group.resource_group_name
      location                      = module.resource_group.resource_group_location
      storage_account_name          = "storage877656"
      public_network_access_enabled = true
      account_kind                  = "StorageV2"
      account_tier                  = "Standard"
      identity_type                 = "UserAssigned"
      object_id                     = [data.azurerm_client_config.current_client_config.object_id]
      account_replication_type      = "ZRS"
      cmk_enabled                   = true

      ###customer_managed_key can only be set when the account_kind is set to StorageV2 or account_tier set to Premium, and the identity type is UserAssigned.
      key_vault_id = module.vault.id

      ##   Storage Container
      containers_list = [
        { name = "app-test", access_type = "private" },
      ]

      virtual_network_id = module.vnet.vnet_id[0]
      subnet_id          = module.subnet.default_subnet_id[0]

      log_analytics_workspace_id = module.log-analytics.workspace_id

    }
    ```
