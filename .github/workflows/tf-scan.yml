name: Checkov Security Scan

on:
  workflow_call:
    inputs:
      directory:
        required: true
        type: string
        description: 'Directory to scan (relative to repository root)'
      continue_on_error:
        required: true
        type: string
        default: 'true'
        description: 'Whether to continue on error (true/false)'
      var_file:
        required: false
        type: string
        description: 'Path to Terraform variable file'

# Proper permissions following principle of least privilege
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Added caching mechanism for improved performance
      - name: Cache Checkov
        uses: actions/cache@v3
        with:
          path: ~/.checkov
          key: ${{ runner.os }}-checkov-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-checkov-

      - name: Install Checkov
        run: |
          python -m pip install --upgrade pip
          pip install checkov

      # Using the Checkov action with both CLI and SARIF output formats
      - name: Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ inputs.directory }}
          soft_fail: ${{ inputs.continue_on_error == 'true' }}
          var_file: ${{ inputs.var_file }}
          download_external_modules: false
          skip_check: CKV_TF_1
          output_format: cli,sarif
          output_file_path: console,results.sarif

      # Create error annotations with file and line information
      - name: Process Checkov Results
        if: steps.checkov.outcome == 'failure' && (success() || failure())
        run: |
          if [ -f "results.sarif" ]; then
            echo "Processing SARIF file to create line-specific error annotations..."
            
            # Use jq to extract the necessary information from the SARIF file
            # First, install jq if not already available
            if ! command -v jq &> /dev/null; then
              echo "Installing jq..."
              sudo apt-get update && sudo apt-get install -y jq
            fi
            
            # Extract results with file paths, line numbers, and messages
            jq -r '.runs[].results[] | select(.level == "error") | 
              (.message.text | gsub("\\n"; " ")) as $message |
              (.locations[0].physicalLocation.artifactLocation.uri // "-") as $file |
              (.locations[0].physicalLocation.region.startLine // 1) as $line |
              "::error file=\($file),line=\($line),title=Security Issue::\($message)"' results.sarif
          else
            echo "::error title=Checkov Scan Failed::Could not find SARIF results file"
          fi

      # Upload SARIF file to GitHub Security tab
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: results.sarif
          category: checkov
